{"version":3,"file":"static/js/675.a7ea089c.chunk.js","mappings":"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","sources":["redux/selectors.js","components/contactForm/ContactForm.styled.js","components/handleInput.js","components/contactForm/ContactForm.jsx","components/contactItem/ContactItem.styled.js","components/contactItem/ContactItem.jsx","components/contactList/ContactList.styled.js","components/contactList/ContactList.jsx","components/searchFilter/SearchFilter.styled.js","components/searchFilter/SearchFilter.jsx","pages/Contacts.jsx"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectFilter = state => state.filter;\n\nexport const selectError = state => state.contacts.error;\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import styled from 'styled-components';\n\nexport const Container = styled.form`\n  align-items: center;\n  border-radius: 8px;\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n  padding: 2rem;\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n`;\n\nexport const Input = styled.input`\n  border: none;\n  outline: none;\n`;\n\nexport const Button = styled.button`\n  align-self: center;\n`;\n","export const handleNameInput = (evt, setName) => {\n  const newTextValue = evt.target.value.replace(/[^a-zA-Z\\s'-]/g, '');\n  setName(newTextValue);\n};\n\nexport const handleNumberInput = (e, setNumber) => {\n  const newNumberValue = e.target.value.replace(\n    /[^+\\d\\s().-]|^[\\s().-]+|(?<=\\d)[+]|\\b[+]\\b/g,\n    ''\n  );\n  setNumber(newNumberValue);\n};\n","import React, { useState } from 'react';\nimport Button from '../Button';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from '../../redux/contacts/contacts-operations';\nimport { selectContacts } from '../../redux/selectors';\nimport {\n  Container as FormContainer,\n  Label as FormLabel,\n  Input as FormInput,\n} from './ContactForm.styled';\nimport { handleNameInput, handleNumberInput } from '../handleInput';\n\nconst ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleAddButtonClick = () => {\n    const nameExists = contacts.some(\n      contact => contact.name.toLowerCase() === name.toLowerCase()\n    );\n    const numberExists = contacts.some(contact => contact.number === number);\n\n    if (nameExists) {\n      alert(`${name} is already in contacts!`);\n    } else if (numberExists) {\n      alert(`${number} is already in contacts!`);\n    } else if (name.trim() !== '' && number.trim() !== '') {\n      dispatch(\n        addContact({\n          name: name,\n          number: number,\n        })\n      );\n      setName('');\n      setNumber('');\n    }\n  };\n\n  return (\n    <FormContainer>\n      <FormLabel>\n        Name:\n        <FormInput\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Name and surname\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          value={name}\n          onChange={evt => handleNameInput(evt, setName)}\n        />\n      </FormLabel>\n\n      <FormLabel>\n        Number:\n        <FormInput\n          type=\"tel\"\n          name=\"number\"\n          placeholder=\"Telephone number\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          value={number}\n          onChange={e => handleNumberInput(e, setNumber)}\n        />\n      </FormLabel>\n\n      <Button type=\"button\" action={handleAddButtonClick}>\n        Add contact\n      </Button>\n    </FormContainer>\n  );\n};\n\nexport default ContactForm;\n","import styled from 'styled-components';\n\nexport const ContactItems = styled.li`\n  align-items: center;\n  background-color: transparent;\n  border-radius: 4px;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  padding: 3px;\n  gap: 10px;\n`;\n\nexport const ContactName = styled.span`\n  color: black;\n  font-weight: bold;\n`;\n\nexport const ContactNumber = styled.a`\n  color: black;\n  font-weight: bold;\n  cursor: pointer;\n\n  &&:hover {\n    text-decoration: underline;\n  }\n`;\n\nexport const EditButton = styled.button`\n  background: linear-gradient(271deg, #90c9ad, #316d80, #25caaf, #5a847d);\n  border-radius: 4px;\n  border: none;\n  color: white;\n  cursor: pointer;\n  font-size: 14px;\n  font-weight: 700;\n  outline: none;\n  padding: 8px 16px;\n  text-align: center;\n  &&:hover {\n    background: linear-gradient(271deg, #90c9ad, #316d80, #25caaf, #5a847d);\n  }\n  margin-right: 10px;\n`;\n\nexport const DeleteButton = styled.button`\n  @media only screen and (max-width: 600px) {\n    margin-right: 10px;\n  }\n  background: linear-gradient(271deg, #90c9ad, #316d80, #363a3c);\n  border-radius: 4px;\n  border: none;\n  color: white;\n  cursor: pointer;\n  font-size: 14px;\n  font-weight: 700;\n  outline: none;\n  padding: 8px 16px;\n  text-align: center;\n  &&:hover {\n    background: linear-gradient(271deg, #90c9ad, #316d80, #363a3c);\n  }\n`;\n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport {\n  deleteContact,\n  editContact,\n} from '../../redux/contacts/contacts-operations';\nimport { Modal, Input, Button, message, Popconfirm } from 'antd';\nimport {\n  ContactItems,\n  ContactName,\n  ContactNumber,\n  EditButton,\n  DeleteButton,\n} from './ContactItem.styled';\nimport { handleNameInput, handleNumberInput } from '../handleInput';\n\nfunction ContactItem({ contact }) {\n  const dispatch = useDispatch();\n  const [showModal, setShowModal] = useState(false);\n  const [newName, setNewName] = useState(contact.name);\n  const [newNumber, setNewNumber] = useState(contact.number);\n\n  const handleDelete = () => {\n    dispatch(deleteContact(contact.id));\n  };\n\n  const handleEdit = () => {\n    setShowModal(true);\n  };\n\n  const handleSave = () => {\n    setShowModal(false);\n    dispatch(editContact({ id: contact.id, name: newName, number: newNumber }));\n  };\n\n  const handleCancel = () => {\n    setShowModal(false);\n  };\n\n  return (\n    <ContactItems>\n      <ContactName>{contact.name}: </ContactName>\n      <ContactNumber href={`tel:${contact.number}`}>\n        tel: {contact.number}\n      </ContactNumber>\n      <div>\n        <EditButton onClick={handleEdit}>Edit</EditButton>\n        <Popconfirm\n          title=\"Delete the contact\"\n          description=\"Are you sure to delete this contact?\"\n          onConfirm={handleDelete}\n          onCancel={() => message.error('Click on No')}\n          okText=\"Yes\"\n          cancelText=\"No\"\n        >\n          <DeleteButton>Delete</DeleteButton>\n        </Popconfirm>\n      </div>\n      <Modal\n        open={showModal}\n        onClose={handleCancel}\n        footer={[\n          <Button key=\"cancel\" onClick={handleCancel}>\n            Cancel\n          </Button>,\n          <Button key=\"save\" onClick={handleSave}>\n            Save\n          </Button>,\n        ]}\n      >\n        <div className=\"modal-content\">\n          <label>Edit name:</label>\n          <Input\n            type=\"text\"\n            value={newName}\n            onChange={evt => handleNameInput(evt, setNewName)}\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n          <label>Edit phone number:</label>\n          <Input\n            type=\"text\"\n            value={newNumber}\n            onChange={e => handleNumberInput(e, setNewNumber)}\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </div>\n      </Modal>\n    </ContactItems>\n  );\n}\n\nContactItem.propTypes = {\n  contact: PropTypes.object.isRequired,\n};\n\nexport default ContactItem;\n","import styled from 'styled-components';\n\nexport const ContactListContainer = styled.div`\n  color: black;\n  font-size: 16px;\n`;\n\nexport const Label = styled.ul`\n  list-style-type: none;\n  padding: 0;\n`;\n\nexport const ListItem = styled.div`\n  padding: 10px;\n`;\n\nexport const ErrorMessage = styled.p`\n  color: red;\n`;\n","import PropTypes from 'prop-types';\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ContactItem from '../contactItem/ContactItem';\nimport {\n  deleteContact,\n  fetchContacts,\n} from '../../redux/contacts/contacts-operations';\nimport {\n  selectError,\n  selectFilteredContacts,\n  selectIsLoading,\n} from '../../redux/selectors';\nimport {\n  ContactListContainer,\n  Label as ListLabel,\n  ListItem as ListItems,\n  ErrorMessage as ErrorMsg,\n} from './ContactList.styled';\nimport { Loader } from 'components/Loader';\n\nconst ContactList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectFilteredContacts);\n  const error = useSelector(selectError);\n  const isLoading = useSelector(selectIsLoading);\n\n  const handleDeleteContact = contactId => {\n    dispatch(deleteContact(contactId));\n  };\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <ContactListContainer>\n      {isLoading && <Loader />}{' '}\n      {!isLoading && !error && (\n        <ListLabel>\n          {contacts && contacts.length > 0 ? (\n            contacts.map(contact => (\n              <ListItems key={contact.id}>\n                <ContactItem\n                  contact={contact}\n                  onDeleteContact={handleDeleteContact}\n                />\n              </ListItems>\n            ))\n          ) : (\n            <p>No contacts available.</p>\n          )}\n        </ListLabel>\n      )}\n      {error && <ErrorMsg>An error occurred while fetching contacts.</ErrorMsg>}\n    </ContactListContainer>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n};\n\nexport default ContactList;\n","import styled from 'styled-components';\n\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const Label = styled.label`\n  color: black;\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n`;\n\nexport const Input = styled.input`\n  /* Adaugă aici orice stil specific pentru input */\n`;\n\nexport const SearchFilterContainer = styled.div`\n  /* Adaugă aici orice stiluri generale pentru SearchFilter */\n`;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from '../../redux/filter/filter-slice';\nimport { selectFilter } from '../../redux/selectors';\nimport {\n  Form,\n  Label,\n  Input,\n  SearchFilterContainer,\n} from './SearchFilter.styled';\n\nconst SearchFilter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  const handleFilterChange = event => {\n    dispatch(setFilter(event.target.value.trim()));\n  };\n\n  return (\n    <SearchFilterContainer>\n      <Form>\n        <Label>\n          Find contact by name:\n          <Input\n            type=\"text\"\n            name=\"filter\"\n            value={filter}\n            onChange={handleFilterChange}\n          />\n        </Label>\n      </Form>\n    </SearchFilterContainer>\n  );\n};\n\nexport default SearchFilter;\n","import { Helmet, HelmetProvider } from 'react-helmet-async';\n\nimport ContactForm from '../components/contactForm/ContactForm';\nimport ContactList from '../components/contactList/ContactList';\nimport Filter from '../components/searchFilter/SearchFilter';\n\nfunction Contacts() {\n  return (\n    <>\n      <HelmetProvider>\n        <Helmet>\n          <title>Phonebook</title>\n        </Helmet>\n        <ContactForm />\n        <h2>Contacts:</h2>\n        <Filter />\n        <ContactList />\n      </HelmetProvider>\n    </>\n  );\n}\n\nexport default Contacts;\n"],"names":["selectContacts","state","contacts","items","selectFilter","filter","selectError","error","selectIsLoading","isLoading","selectFilteredContacts","createSelector","contact","name","toLowerCase","includes","Container","styled","_templateObject","_taggedTemplateLiteral","Label","_templateObject2","Input","_templateObject3","handleNameInput","_templateObject4","evt","setName","target","value","replace","handleNumberInput","e","setNumber","_useState","useState","_useState2","_slicedToArray","_useState3","_useState4","number","dispatch","useDispatch","useSelector","_jsxs","FormContainer","children","FormLabel","_jsx","FormInput","type","placeholder","title","required","onChange","Button","action","nameExists","some","numberExists","alert","concat","trim","addContact","ContactItems","ContactName","ContactNumber","EditButton","DeleteButton","_templateObject5","_ref","showModal","setShowModal","newName","setNewName","_useState5","_useState6","newNumber","setNewNumber","handleCancel","href","onClick","Popconfirm","description","onConfirm","deleteContact","id","onCancel","message","okText","cancelText","Modal","open","onClose","footer","editContact","className","ContactListContainer","ListItem","ErrorMessage","handleDeleteContact","contactId","useEffect","fetchContacts","Loader","ListLabel","length","map","ListItems","ContactItem","onDeleteContact","ErrorMsg","Form","SearchFilterContainer","event","setFilter","_Fragment","HelmetProvider","Helmet","ContactForm","Filter","ContactList"],"sourceRoot":""}